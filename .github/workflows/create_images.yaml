name: Build images

on:
  workflow_dispatch:
    inputs:
      build-image-base64:
        description: image.yaml by diskimage-builder in base64

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}-${{ github.event.workflow_call.workflow_file }}"
  cancel-in-progress: true


jobs:
  vars:
    name: Generation vars
    runs-on: ubuntu-latest
    outputs:
      name-playbooks: ${{ steps.dynamic.outputs.PLAYBOOKS }}
      os: ${{ steps.dynamic.outputs.OS }}
      home: ${{ steps.static.outputs.HOME }}
    steps:
      - uses: actions/checkout@v4
      - name: Check all playbooks
        working-directory: playbooks
        id: _tmp_playbooks
        run: echo "value=$(echo "["$(ls | sed  "s/.*/'&'/" | paste -sd, -)"]")" >> "$GITHUB_OUTPUT"

      - name: Create list from array of strings
        id: _tpm_os
        run: echo "value=['generic/ubuntu2310',]" >> "$GITHUB_OUTPUT"

      - uses: actions/setup-python@v5
        with:
         cache: pip
         python-version: '3.12'

      - name: Run Workflow
        id: build-image-yaml
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: 'data.yaml'
          encodedString: ${{ inputs.build-image-base64 }}

      - name: Encode image.yaml from base64
        id: _tpm_image-yaml
        run: |
          python -c 'import yaml, sys; print(yaml.safe_load(sys.stdin))' < data.yaml
          
          echo "value=$( echo $(cat ${{ steps.build-image-yaml.outputs.filePath }}))" >> "$GITHUB_OUTPUT"

      - name: Create dynamic vars
        id: dynamic
        run: |
          echo "PLAYBOOKS=${{ steps._tmp_playbooks.outputs.value }}" >> "$GITHUB_OUTPUT"
          echo "OS=$(echo "${{ steps._tpm_os.outputs.value }}" )" >> "$GITHUB_OUTPUT"

      - name: Create static vars
        id: static
        run: |
          echo "HOME=$(echo $HOME)" >> "$GITHUB_OUTPUT"

#  test:
#    needs: [ vars ]
#    uses: text-adi/ansible-playbook/.github/workflows/test.yaml@dev
#    with:
#      os: ${{ needs.vars.outputs.os }}
#      name-playbooks: ${{ needs.vars.outputs.name-playbooks }}

  build-images:
    name: Build specific images
    needs: [ vars ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        name-playbook: ${{ fromJson(needs.vars.outputs.name-playbooks) }}
        os: ${{ fromJson(needs.vars.outputs.os) }}
    steps:
      - uses: actions/checkout@v4
      - name: Install source
        run: |
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list

      - uses: awalsh128/cache-apt-pkgs-action@v1
        id: apt-cache
        with:
          packages: vagrant virtualbox ansible-core
          version: 1

      - name: Update
        run: |
          sudo apt-get update

      - name: Install vagrant
        run: |
          sudo apt-get install -y vagrant

      - name: Install virtualBox
        run: |
          sudo apt-get install -y virtualbox

      - name: Install ansible
        run: |
          sudo apt-get install -y ansible-core

      - name: Check version vagrant
        run: |
          vagrant -v

      - name: Check version virtualbox
        run: |
          VBoxManage -v

      - name: Check version ansible-core
        run: |
          ansible --version

      - name: Update Vagrantfile
        working-directory: vagrant
        run: |
          sed -i "s|{{ box }}|${{ matrix.os }}|g" Vagrantfile
          sed -i "s|{{ home_dir }}|${{ needs.vars.outputs.home }}|g" Vagrantfile

      - name: Check Vagrantfile
        working-directory: vagrant
        run: |
          cat Vagrantfile

      - name: Generate ssh key
        working-directory: ${{ needs.vars.outputs.home }}
        run: |
          mkdir -p .ssh
          ssh-keygen -t rsa -b 2048 -N "" -f .ssh/id_rsa

      - name: Restore cache Vagrant Boxes
        id: cache-vagrant-boxes-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ needs.vars.outputs.home }}/.vagrant.d/boxes
          key: vagrant-${{ runner.os }}-boxes-${{ matrix.os }}

      - name: Vagrant download box
        if: steps.cache-vagrant-boxes-restore.outputs.cache-hit != 'true'
        run: |
          vagrant box add ${{ matrix.os }} --provider virtualbox

      - name: Check box
        working-directory: ${{ needs.vars.outputs.home }}
        run: |
          ls -la .vagrant.d/boxes

      - name: Save cache Vagrant Boxes
        if: steps.cache-vagrant-boxes-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            ${{ needs.vars.outputs.home }}/.vagrant.d/boxes
          key: ${{ steps.cache-vagrant-boxes-restore.outputs.cache-primary-key }}

      - name: Vagrant UP
        working-directory: vagrant
        env:
          VAGRANT_DISABLE_VBOXSYMLINKCREATE: 1
        run: |
          vagrant up

      - name: Create dir
        run: mkdir -p inventory

      - name: Update ansible-playbook hosts
        working-directory: inventory
        run: |
          echo "[servers]" > hosts.yaml
          echo "192.168.57.2 ansible_user=vagrant ansible_port=22 ansible_shell_type=sh ansible_ssh_private_key_file=${{ needs.vars.outputs.home }}/.ssh/id_rsa" >> hosts.yaml

      - name: Check Vagrantfile
        working-directory: inventory
        run: |
          cat hosts.yaml

      - name: Sleep seconds
        run: sleep 10

      - name: Install requirements
        run: |
          ansible-galaxy collection install -r collections/requirements.yaml || true
      
      - name: Create configuration images
        working-directory: roles/build-image/
        run: |
          mkdir -p files
          echo "${{ inputs.build-image }}" > files/image.yaml

      - name: Check image.yaml
        working-directory: roles/build-image/files
        run: |
          cat 

      - name: Run ansible-playbook - ${{ matrix.name-playbook }}
        run: |
          ansible-playbook playbooks/${{ matrix.name-playbook }}

      - name: Get name image
        id: image_yaml
        working-directory: roles/build-image/files
        run: |
          echo "imagename=$(echo $( docker run -i --rm mikefarah/yq '.[0].imagename' < image.yaml ) )" >> "$GITHUB_OUTPUT"          
          docker run -i --rm mikefarah/yq '.[0].imagename' < image.yaml


      - name: Create output dir
        run: mkdir -p output

      - name: Copy image from build host
        working-directory: output
        run: |
          rsync -avh --progress root@192.168.57.2:/root/build/${{ steps.image_yaml.outputs.imagename }}.* ./

      - name: Check image
        working-directory: output
        run: ls -la

      - name: Archive image
        uses: actions/upload-artifact@v4
        with:
          name: "${{ steps.image_yaml.outputs.imagename }}"
          path: output
